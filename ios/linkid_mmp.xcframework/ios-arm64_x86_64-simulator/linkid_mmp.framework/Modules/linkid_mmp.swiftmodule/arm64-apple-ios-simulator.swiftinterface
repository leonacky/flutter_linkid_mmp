// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 effective-4.1.50 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4 -enforce-exclusivity=checked -O -module-name linkid_mmp
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreTelephony
import DeviceCheck
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@_exported import linkid_mmp
@_hasMissingDesignatedInitializers @objcMembers public class Airflex {
  @objc public static func logEvent(name: Swift.String, data: [Swift.String : Any]?)
  @objc public static func setDevMode(_ devMode: Swift.Bool)
  public static func intSDK(partnerCode: Swift.String, appSecret: Swift.String, options: linkid_mmp.AirflexOptions?)
  @objc public static func intSDK(partnerCode: Swift.String, appSecret: Swift.String)
  @objc public static func setCurrentScreen(_ name: Swift.String)
  @objc public static func recordError(name: Swift.String, stackTrace: Swift.String)
  public static func setUserInfo(userInfo: linkid_mmp.UserInfo)
  @objc public static func setRevenue(orderId: Swift.String, amount: Swift.Double, currency: Swift.String, data: [Swift.String : Any]?)
  @objc public static func handleDeeplink(_ handleDeeplink: @escaping (Swift.String) -> Swift.Void)
  public static func setProductList(listName: Swift.String, products: [linkid_mmp.ProductItem])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class AirflexDeepLinkDelegate : UIKit.UIResponder, UIKit.UIApplicationDelegate {
  @_Concurrency.MainActor(unsafe) public static let shared: linkid_mmp.AirflexDeepLinkDelegate
  @_Concurrency.MainActor(unsafe) @objc public func application(_ application: UIKit.UIApplication, open url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:]) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func handleDeeplink(url: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
public class AirflexOptions {
  public var showLog: Swift.Bool
  public var autoTrackingScreen: Swift.Bool
  public init()
  @objc deinit
}
@objcMembers public class ProductCategory {
  @objc public init(categoryId: Swift.String, categoryName: Swift.String)
  @objc public func toDictionary() -> [Swift.String : Any]
  public static func convertToArray(_ items: [linkid_mmp.ProductCategory]) -> [[Swift.String : Any]]
  public static func fromDictionary(_ data: [Swift.String : Any]) -> linkid_mmp.ProductCategory
  public static func fromList(_ data: [[Swift.String : Any]]) -> [linkid_mmp.ProductCategory]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Common {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Crashlytics {
  public static func setup()
  public static func recordError(name: Swift.String, stackTrace: Swift.String)
  public static func check()
  @objc deinit
}
public class DeepLinkAirflexParameters {
  public var name: Swift.String?
  public var source: Swift.String?
  public var code: Swift.String?
  public var medium: Swift.String?
  public var campaign: Swift.String?
  public var term: Swift.String?
  public var content: Swift.String?
  public init(source: Swift.String? = nil, code: Swift.String? = nil, medium: Swift.String? = nil, campaign: Swift.String? = nil)
  public func buildParams() -> [Swift.String : Any]
  @objc deinit
}
public class DeepLinkAndroidParameters {
  public var packageName: Swift.String?
  public var playStoreURL: Swift.String?
  public var customSchema: Swift.String?
  public init(packageName: Swift.String? = nil)
  public func buildParams() -> [Swift.String : Any]
  @objc deinit
}
public class DeepLinkBuilder {
  public var iOSParameters: linkid_mmp.DeepLinkIOSParameters?
  public var androidParameters: linkid_mmp.DeepLinkAndroidParameters?
  public var airflexParameters: linkid_mmp.DeepLinkAirflexParameters?
  public init()
  public func createLink(completion: @escaping (linkid_mmp.DeepLinkBuilderResult?, linkid_mmp.DeepLinkBuilderError?) -> Swift.Void)
  public func createShortLink(longLink: Swift.String, name: Swift.String = "", shortLinkId: Swift.String = "", completion: @escaping (linkid_mmp.DeepLinkBuilderResult?, linkid_mmp.DeepLinkBuilderError?) -> Swift.Void)
  @objc deinit
}
public class DeepLinkBuilderError {
  public var code: Swift.String
  public var message: Swift.String
  public init(code: Swift.String, message: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DeepLinkBuilderResult {
  public var shortLink: Swift.String
  public var longLink: Swift.String
  @objc deinit
}
public typealias HandleDeeplink = (Swift.String) -> Swift.Void
@_hasMissingDesignatedInitializers @objcMembers public class DeepLinkHandler {
  @objc public static var handleDeeplink: linkid_mmp.HandleDeeplink?
  @objc public static func initDeeplink()
  @objc public static func saveDeeplink(deeplinkCountDate: Swift.Int64)
  @objc public static func setDeepLink(url: Swift.String)
  @objc public static func getLastDeepLink() -> Swift.String
  @objc public static func getCurrentDeepLink() -> Swift.String
  @objc public static func getUDL()
  @objc deinit
}
public class DeepLinkIOSParameters {
  public var bundleID: Swift.String?
  public var appStoreID: Swift.String?
  public var customSchema: Swift.String?
  public var appStoreURL: Swift.String?
  public init(bundleID: Swift.String? = nil, appStoreID: Swift.String? = nil)
  public func buildParams() -> [Swift.String : Any]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DetectWindowTouch : UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func sendEvent(_ event: UIKit.UIEvent)
  @available(iOS 13.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(windowScene: UIKit.UIWindowScene)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum Network : Swift.String {
  case wifi
  case cellular
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class Logger {
  @objc deinit
}
@objcMembers public class ProductItem {
  @objc public var productId: Swift.String
  public init(id: Swift.String, name: Swift.String, image: Swift.String, price: Swift.String? = "", quantity: Swift.Int? = 1, categories: [linkid_mmp.ProductCategory]? = [])
  @objc public func setQuantity(quantity: Swift.Int)
  public func addCategory(category: linkid_mmp.ProductCategory)
  public static func convertToArray(_ items: [linkid_mmp.ProductItem]) -> [[Swift.String : Any]]
  @objc public func toDictionary() -> [Swift.String : Any]
  public static func fromDictionary(_ data: [Swift.String : Any]) -> linkid_mmp.ProductItem
  public static func fromList(_ data: [[Swift.String : Any]]) -> [linkid_mmp.ProductItem]
  public static func convertToJsonString(listName: Swift.String, products: [linkid_mmp.ProductItem]) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers public class UserInfo {
  public class func create(userId: Swift.String, name: Swift.String, gender: Swift.String, email: Swift.String, phone: Swift.String, age: Swift.Int32, country: Swift.String, city: Swift.String, deviceToken: Swift.String) -> linkid_mmp.UserInfo
  @objc public func toDictionary() -> [Swift.String : Any]
  public class func fromDictionary(data: [Swift.String : Any]) -> linkid_mmp.UserInfo
  @objc deinit
}
extension linkid_mmp.Network : Swift.Equatable {}
extension linkid_mmp.Network : Swift.Hashable {}
extension linkid_mmp.Network : Swift.RawRepresentable {}
